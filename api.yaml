openapi: "3.0.0"
info:
  title: Otto user service
  version: "1.0"
paths:
  /post:
    post:
      operationId: createNewPostV1
      summary: create a new post
      requestBody:
        description: post to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPost"
      responses:
        '201':
          description: |-
            201 response
    get:
      operationId: getPostsV1
      summary: get posts
      responses:
        '200':
          description: a list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /post/{uuid}:
    get:
      operationId: getPostV1
      summary: get a post
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: get a post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: |-
            404 response
    delete:
      operationId: deletePostV1
      summary: delete a post
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: post deleted
        '404':
          description: |-
            404 response
  /post/{uuid}/replies:
    get:
      operationId: getPostRepliesV1
      summary: get replies to a post
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: post replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reply'
        '404':
          description: |-
            404 response
  /reply:
    post:
      operationId: createAReply
      summary: create a reply
      requestBody:
        description: reply to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewReply"
      responses:
        '201':
          description: |-
            201 response
  /report/post:
    post:
      operationId: createAPostReportV1
      summary: create a post report
      requestBody:
        description: post report to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPostReport"
      responses:
        '201':
          description: |-
            201 response
  /report/reply:
    post:
      operationId: createAReplyReportV1
      summary: create a reply report
      requestBody:
        description: reply report to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewReplyReport"
      responses:
        '201':
          description: |-
            201 response
  /reshare:
    post:
      operationId: createAReshare
      summary: create a reshare
      requestBody:
        description: reshare to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewReshare"
      responses:
        '201':
          description: |-
            201 response
  /rehare/{uuid}:
    get:
      operationId: getReshare
      summary: get a reshare
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: get a reshare
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reshare'
        '404':
          description: |-
            404 response
  /user/{uuid}/posts:
    get:
      operationId: getUserPostsV1
      summary: get user posts
      parameters:
        - in: path
          name: uuid
          description: a user's unique ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A user's posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
  /user/{uuid}/follow-posts:
    get:
      operationId: getPostsForUserFollowsV1
      summary: get posts for a user's follows
      parameters:
        - in: path
          name: uuid
          description: a user ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Posts for a user's follows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
  /user/{uuid}/new-posts:
    get:
      operationId: getNewPostsV1
      summary: get new posts
      parameters:
        - in: path
          name: uuid
          description: a user ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: New posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
  /user/{uuid}/follows:
    get:
      operationId: getUserFollowsV1
      summary: get user follows
      parameters:
        - in: path
          name: uuid
          description: a user's unique ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A user's follows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Follow"
        '404':
          description: No user found
    post:
      operationId: addUserFollowV1
      summary: add a follow
      parameters:
        - in: path
          name: uuid
          description: a user's unique ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: follow to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewFollow"
      responses:
        '201':
          description: Follow created
  /user/{uuid}/suggested-follows:
    get:
      operationId: getSuggestedFollowsForUserV1
      summary: get suggested follows for user
      parameters:
        - in: path
          name: uuid
          description: a user ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A user's follows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /session:
    post:
      operationId: createSessionV1
      summary: create a session and login
      requestBody:
        description: new session
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSession"
      responses:
        '201':
          description: session created
  /follow/{uuid}:
    delete:
      operationId: deleteFollowV1
      summary: delete a follow
      parameters:
        - in: path
          name: uuid
          description: a user ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: follow deleted
components:
  schemas:
    User:
      type: object
      required:
        - uuid
        - name
        - username
        - created
      properties:
        uuid:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        username:
          type: string
        profile_pic:
          type: string
        name:
          type: string
        bio_message:
          type: string
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        replies:
          type: array
          items:
            $ref: "#/components/schemas/Reply"
        follows:
          type: array
          items:
            $ref: "#/components/schemas/Follow"
    Follow:
      type: object
      required:
        - uuid
        - user
        - following
      properties:
        uuid:
          type: string
          format: uuid
        user:
          $ref: "#/components/schemas/User"
        following:
          $ref: "#/components/schemas/User"
    NewFollow:
      type: object
      properties:
        following:
          $ref: "#/components/schemas/User"
    Post:
      type: object
      required:
        - uuid
        - replies
        - created
      properties:
        uuid:
          type: string
          format: uuid
        text:
          type: string
        user:
          $ref: "#/components/schemas/User"
        replies:
          type: array
          items:
            $ref: "#/components/schemas/Reply"
        created_at:
          type: string
          format: date-time
    NewPost:
      type: object
      required:
        - text
        - user
      properties:
        text:
          type: string
        user:
          $ref: "#/components/schemas/User"
    Reply:
      type: object
      required:
        - created
        - post
        - text
        - user
      properties:
        created_at:
          type: string
          format: date-time
        post:
          $ref: "#/components/schemas/Post"
        text:
          type: string
        user:
          $ref: "#/components/schemas/User"
    NewReply:
      type: object
      required:
        - post
        - text
        - user
      properties:
        post:
          $ref: "#/components/schemas/Post"
        text:
          type: string
        user:
          $ref: "#/components/schemas/User"
    Reshare:
      type: object
      required:
        - uuid
        - user
        - post
      properties:
        uuid:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        text:
          type: string
        user:
          $ref: "#/components/schemas/User"
        post:
          $ref: "#/components/schemas/Post"
    NewReshare:
      type: object
      required:
        - user
        - post
      properties:
        text:
          type: string
        user:
          $ref: "#/components/schemas/User"
        post:
          $ref: "#/components/schemas/Post"
    PostReport:
      type: object
      required:
        - uuid
        - created
        - user
        - post
      properties:
        uuid:
          type: string
          format: uuid
        created_at:
          type: string
          format: timestamp
        user:
          $ref: "#/components/schema/User"
        text:
          type: string
        post:
          $ref: "#/components/schemas/Post"
    ReplyReport:
      type: object
      required:
        - uuid
        - created
        - reporter
        - reply
      properties:
        uuid:
          type: string
          format: uuid
        created_at:
          type: string
          format: timestamp
        user:
          $ref: "#/components/schema/User"
        text:
          type: string
        reply:
          $ref: "#/components/schemas/Reply"
    NewPostReport:
      type: object
      required:
        - user
        - post
      properties:
        text:
          type: string
        user:
          $ref: "#/components/schemas/User"
        post:
          $ref: "#/components/schemas/Post"
    NewReplyReport:
      type: object
      required:
        - user
        - reply
      properties:
        text:
          type: string
        user:
          $ref: "#/components/schemas/User"
        reply:
          $ref: "#/components/schemas/Reply"
    NewSession:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    Visibility:
      type: string
      enum:
        - public
        - limited
        - private
